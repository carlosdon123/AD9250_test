--a_graycounter DEVICE_FAMILY="Arria 10" PVALUE=0 WIDTH=5 clock cnt_en q
--VERSION_BEGIN 16.1 cbx_a_gray2bin 2017:01:18:18:20:37:SJ cbx_a_graycounter 2017:01:18:18:20:37:SJ cbx_cycloneii 2017:01:18:18:20:37:SJ cbx_mgl 2017:01:18:18:27:06:SJ cbx_stratix 2017:01:18:18:20:37:SJ cbx_stratixii 2017:01:18:18:20:37:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.



--synthesis_resources = reg 6 
OPTIONS ALTERA_INTERNAL_OPTION = "{-to parity1} POWER_UP_LEVEL=HIGH";

SUBDESIGN a_graycounter_l86
( 
	clock	:	input;
	cnt_en	:	input;
	q[4..0]	:	output;
) 
VARIABLE 
	counter2a[4..0] : dffeas;
	parity1 : dffeas
		WITH (
			power_up = "high"
		);
	cntr_cout[4..0]	: WIRE;
	parity_cout	: WIRE;
	sclr	: NODE;
	updown	: NODE;

BEGIN 
	counter2a[].clk = clock;
	counter2a[].d = ( (counter2a[4].q $ cntr_cout[3..3]), (counter2a[3].q $ (counter2a[2].q & cntr_cout[2..2])), (counter2a[2].q $ (counter2a[1].q & cntr_cout[1..1])), (counter2a[1].q $ (counter2a[0].q & cntr_cout[0..0])), ((cnt_en & (counter2a[0].q $ (! parity_cout))) # ((! cnt_en) & counter2a[0].q)));
	counter2a[].sclr = sclr;
	parity1.clk = clock;
	parity1.d = ((cnt_en & ((((counter2a[0..0].q $ counter2a[1..1].q) $ counter2a[2..2].q) $ counter2a[3..3].q) $ counter2a[4..4].q)) # ((! cnt_en) & parity1.q));
	parity1.sclr = sclr;
	cntr_cout[] = ( B"0", (cntr_cout[2..2] & (! counter2a[2].q)), (cntr_cout[1..1] & (! counter2a[1].q)), (cntr_cout[0..0] & (! counter2a[0].q)), (cnt_en & parity_cout));
	parity_cout = (((! parity1.q) $ (! updown)) & cnt_en);
	q[] = counter2a[].q;
	sclr = GND;
	updown = VCC;
END;
--VALID FILE
